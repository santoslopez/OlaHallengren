/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package jinternal;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import javax.swing.ImageIcon;

import javax.swing.JOptionPane;

import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import main.MenuPrincipalJFrame;
/**
 *
 * @author santoslopeztzoy
 */
public class JInternalFrameCrearCopiaSeguridad extends javax.swing.JInternalFrame {
    //String  = "m.bat";
    String rutarMoverArchivos = "C:\\respaldo\\m.bat";

    
    ProcessBuilder procesoMoverArchivos = new ProcessBuilder("cmd", "/C",rutarMoverArchivos);

    
    private ImageIcon icon = new ImageIcon("src/img/confirm.png");
        
    private ImageIcon iconError = new ImageIcon("src/img/close.png");
    
    private static JInternalFrameCrearCopiaSeguridad instancia;
    public static JInternalFrameCrearCopiaSeguridad getInstancia(){
        if (instancia==null){
            instancia=new JInternalFrameCrearCopiaSeguridad();
        }
        return instancia;
    }
    /**
     * Creates new form JInternalFrameCrearCopiaSeguridad
     */
    public JInternalFrameCrearCopiaSeguridad() {
        initComponents();
        // habilitar cierre
        setClosable(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelContenedorPrincipal = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonGuardarCopiaSeguridad = new javax.swing.JButton();

        setTitle("Crear copia de seguridad");

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("COPIA DE SEGURIDAD");

        jButtonGuardarCopiaSeguridad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/disk.png"))); // NOI18N
        jButtonGuardarCopiaSeguridad.setText("Guardar copia");
        jButtonGuardarCopiaSeguridad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarCopiaSeguridadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelContenedorPrincipalLayout = new javax.swing.GroupLayout(jPanelContenedorPrincipal);
        jPanelContenedorPrincipal.setLayout(jPanelContenedorPrincipalLayout);
        jPanelContenedorPrincipalLayout.setHorizontalGroup(
            jPanelContenedorPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButtonGuardarCopiaSeguridad, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
        );
        jPanelContenedorPrincipalLayout.setVerticalGroup(
            jPanelContenedorPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelContenedorPrincipalLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonGuardarCopiaSeguridad)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelContenedorPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelContenedorPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void checkFolderAccess(String folderPath) throws Exception {
        File folder = new File(folderPath);

        if (folder.exists()) {
            if (folder.isDirectory()) {
                File[] files = folder.listFiles();
                if (files != null) {
                    if (files.length > 0) {
                        System.out.println("Archivos en la carpeta " + folderPath + ":");
                        for (File file : files) {
                            System.out.println(file.getName());
                        }
                    } else {
                        System.out.println("La carpeta " + folderPath + " está vacía.");
                    }
                } else {
                    throw new Exception("No se pudo listar los archivos en la carpeta.");
                }
            } else {
                throw new Exception("La ruta especificada no es una carpeta.");
            }
        } else {
            throw new Exception("La carpeta " + folderPath + " no existe.");
        }
    }
    private void jButtonGuardarCopiaSeguridadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarCopiaSeguridadActionPerformed
        // TODO add your handling code here:
        String url = "jdbc:sqlserver://192.168.1.15:1433;database=DANTAS;encrypt=false;";
        String user = "sa";
        String password = "Union2018";
        Connection conn = null;
        
        Statement stmt = null;
         
        try {
            // Cargar el driver JDBC
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            // Establecer la conexión
            conn = DriverManager.getConnection(url,user,password);
            
            if(conn!=null && !conn.isClosed()){

                stmt = conn.createStatement();

                Date date = new Date();

                // Definir formato que se necesita
                SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");

                // Convertir date a String
                String convertirFormatoEsperado = formato.format(date);

                String nameBackup = convertirFormatoEsperado+"-.bak";
             
                int confirmarCopiaSeguridad = JOptionPane.showConfirmDialog(null, "Confirmar","¿Deseas continuar con el respaldo de base de datos?",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        icon);
                if (confirmarCopiaSeguridad==JOptionPane.YES_OPTION){
                    // Comando de respaldo
                    String backupSQL = "BACKUP DATABASE DANTAS TO DISK = '" + nameBackup + "' WITH INIT";

                    // Ejecutar el comando de respaldo
                    stmt.executeUpdate(backupSQL);
                    //System.out.println("Copia de seguridad completada exitosamente en macOS en " + backupFilePath);


                    // Crear un proceso para correr un archivo .bat
                    try {
                        // TODO add your handling code here:

                        // lanzar el proceso
                        Process p = procesoMoverArchivos.start();
                       int exitCode = p.waitFor();
                       // antes p.waitFor
                       // Destruir el proceso después de que termine
                       
                       p.destroy();
                       

                       // Cerrar la conexión y el statement
                     
                       //JInternalFrameCrearCopiaSeguridad.getInstancia().dispose();
                       //JOptionPane.showMessageDialog(null,"Copia de seguridad generado correctamente en el servidor","Guardado",JOptionPane.INFORMATION_MESSAGE,icon);
                        if (exitCode == 0) {
                            JOptionPane.showMessageDialog(null, "Copia de seguridad generada correctamente en el servidor", "Guardado", JOptionPane.INFORMATION_MESSAGE, icon);
                        } else {
                            JOptionPane.showMessageDialog(null, "Error al generar la copia de seguridad. Código de salida: " + exitCode, "Error", JOptionPane.ERROR_MESSAGE);
                        }

                    } catch (InterruptedException ex) {
                        Logger.getLogger(MenuPrincipalJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(JInternalFrameCrearCopiaSeguridad.class.getName()).log(Level.SEVERE, null, ex);
                    }finally{
                        // Asegurarse de cerrar el statement y la conexión
                        try {
                            if (stmt != null) stmt.close();
                            if (conn != null) conn.close();
                        } catch (SQLException e) {
                            Logger.getLogger(JInternalFrameCrearCopiaSeguridad.class.getName()).log(Level.SEVERE, null, e);
                        } 
                    }
                               
                }else{
                    JOptionPane.showMessageDialog(null,"Base de datos no se guardo","Error",JOptionPane.ERROR_MESSAGE,iconError);
                }                
            }else{
                JOptionPane.showMessageDialog(null,"Erro no se pudo establecer la conexión con el servidor","Error",JOptionPane.ERROR_MESSAGE,iconError);
            }
            
        } catch (ClassNotFoundException e) {
            String mensaje="<html><body style='width: 300px;'>" +
                      "Se produjo el siguiente error: " + e.getMessage() +
                      "</body></html>";

            //e.printStackTrace();
            JOptionPane.showMessageDialog(null,mensaje,"Error ClassNotFound",JOptionPane.ERROR_MESSAGE,iconError);
        } catch (SQLException ex) {
            String mensaje="<html><body style='width: 300px;'>" +
                      "Se produjo el siguiente error: " + ex.getMessage() +
                      "</body></html>";
            //System.out.println("Error realizando la copia de seguridad.");
            JOptionPane.showMessageDialog(null,mensaje,"Error SQLException",JOptionPane.ERROR_MESSAGE,iconError);

        }
        //String sourceBackup = "C:\\Program Files\\Microsoft SQL Server\\MSSQL15.MSSQLSERVER\\MSSQL\\Backup\\";
        //String destination = "\\\\lacadena\\hola";

    }//GEN-LAST:event_jButtonGuardarCopiaSeguridadActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGuardarCopiaSeguridad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanelContenedorPrincipal;
    // End of variables declaration//GEN-END:variables
}
